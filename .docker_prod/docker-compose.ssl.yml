version: "3.3"

services:
  plx_nginx:
    container_name: nginx
    build:
      context: nginx
    restart: always
    volumes:
      - ../media:/app/media
      - ../static:/app/static
#      - certbot-etc:/etc/letsencrypt
#      - certbot-var:/var/lib/letsencrypt
    ports:
      - "80:80"
      - "443:443"

#  certbot:
#    image: certbot/certbot
#    container_name: certbot
#    volumes:
#      - certbot-etc:/etc/letsencrypt
#      - certbot-var:/var/lib/letsencrypt
#    depends_on:
#      - plx_nginx
#    command: certonly --webroot --webroot-path=~/ai2 --email pitonx60@gmail.com --agree-tos --no-eff-email --staging -d ai.planerix.com -d www.ai.planerix.com

  plx_db:
    container_name: db
    image: postgres:12.0-alpine
    restart: always
    volumes:
      - plx_postgres_data:/var/lib/postgresql/data/
    env_file:
      - ../../.api.env.prod.db

  plx_tfs:
    image: tensorflow/serving:latest
    container_name: tfs
    restart: unless-stopped
    command:
      - --model_config_file=/config/models.config
    volumes:
      - ../tf_serving/cnn_check_plan:/models/cnn_check_plan
      - ../tf_serving/unet_find_windows:/models/unet_find_windows
      - ../tf_serving/yolo3:/models/yolo3
      - ../tf_serving/config:/config

  plx_web:
    container_name: web
    build:
      context: ..
      dockerfile: Dockerfile.prod
    restart: always
    volumes:
      - ../media:/app/media
    expose:
      - 8000
    env_file:
      - ../../.env.prod
    command: gunicorn plannerix_ai.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      - plx_db
      - plx_tfs

volumes:
  plx_postgres_data:
#  certbot-etc:
#  certbot-var: